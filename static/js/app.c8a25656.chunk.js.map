{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","parse","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","btnText","color","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","payload","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.c8a25656.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3A3D40\",\r\n  toDoBg: \"#1A1C20\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  TextInput,\r\n  Alert,\r\n  ScrollView,\r\n  Platform,\r\n} from \"react-native\";\r\nimport { Fontisto } from \"@expo/vector-icons\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { theme } from \"./colors\";\r\n\r\nconst STORAGE_KEY = \"@toDos\";\r\nexport default function App() {\r\n  const [working, setWorking] = useState(true);\r\n  const [text, setText] = useState(\"\");\r\n  const [toDos, setToDos] = useState({});\r\n  useEffect(() => {\r\n    loadToDos();\r\n  }, []);\r\n  const travel = () => setWorking(false);\r\n  const work = () => setWorking(true);\r\n  const onChangeText = (payload) => setText(payload);\r\n  const saveToDos = async (toSave) => {\r\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\r\n  };\r\n  const loadToDos = async () => {\r\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\r\n    if (s) {\r\n      setToDos(JSON.parse(s));\r\n    }\r\n  };\r\n  const addToDo = async () => {\r\n    if (text === \"\") {\r\n      return;\r\n    }\r\n    const newToDos = {\r\n      ...toDos,\r\n      [Date.now()]: { text, working },\r\n    };\r\n    setToDos(newToDos);\r\n    await saveToDos(newToDos);\r\n    setText(\"\");\r\n  };\r\n  const deleteToDo = (key) => {\r\n    if (Platform.OS === \"web\") {\r\n      const ok = confirm(\"Do you want to delete this To Do?\");\r\n      if (ok) {\r\n        const newToDos = { ...toDos };\r\n        delete newToDos[key];\r\n        setToDos(newToDos);\r\n        saveToDos(newToDos);\r\n      }\r\n    } else {\r\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\r\n        { text: \"Cancel\" },\r\n        {\r\n          text: \"I'm Sure\",\r\n          style: \"destructive\",\r\n          onPress: () => {\r\n            const newToDos = { ...toDos };\r\n            delete newToDos[key];\r\n            setToDos(newToDos);\r\n            saveToDos(newToDos);\r\n          },\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar style=\"auto\" />\r\n      <View style={styles.header}>\r\n        <TouchableOpacity onPress={work}>\r\n          <Text\r\n            style={{ ...styles.btnText, color: working ? \"white\" : theme.grey }}\r\n          >\r\n            Work\r\n          </Text>\r\n        </TouchableOpacity>\r\n        <TouchableOpacity onPress={travel}>\r\n          <Text\r\n            style={{\r\n              ...styles.btnText,\r\n              color: !working ? \"white\" : theme.grey,\r\n            }}\r\n          >\r\n            Travel\r\n          </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      <TextInput\r\n        onSubmitEditing={addToDo}\r\n        onChangeText={onChangeText}\r\n        returnKeyType=\"done\"\r\n        value={text}\r\n        placeholder={\r\n          working ? \"What do you have to do?\" : \"Where do you want to go?\"\r\n        }\r\n        style={styles.input}\r\n      />\r\n      <ScrollView>\r\n        {Object.keys(toDos).map((key) =>\r\n          toDos[key].working === working ? (\r\n            <View style={styles.toDo} key={key}>\r\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\r\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\r\n                <Fontisto name=\"trash\" size={18} color={theme.grey} />\r\n              </TouchableOpacity>\r\n            </View>\r\n          ) : null\r\n        )}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: theme.bg,\r\n    paddingHorizontal: 20,\r\n  },\r\n  header: {\r\n    justifyContent: \"space-between\",\r\n    flexDirection: \"row\",\r\n    marginTop: 100,\r\n  },\r\n  btnText: {\r\n    fontSize: 38,\r\n    fontWeight: \"600\",\r\n  },\r\n  input: {\r\n    backgroundColor: \"white\",\r\n    paddingVertical: 15,\r\n    paddingHorizontal: 20,\r\n    borderRadius: 30,\r\n    marginVertical: 20,\r\n    fontSize: 18,\r\n  },\r\n  toDo: {\r\n    backgroundColor: theme.toDoBg,\r\n    marginBottom: 10,\r\n    paddingVertical: 20,\r\n    paddingHorizontal: 20,\r\n    borderRadius: 15,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  toDoText: {\r\n    color: \"white\",\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n});\r\n"],"sourceRoot":""}